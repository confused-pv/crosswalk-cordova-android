#!/usr/bin/env node

/**
 * Dependencies
 */
var fs = require('fs-extra');
var xml2js = require('xml2js');
var log = require('verbalize');
var Download = require('download');
var progress = require('download-status');
var exec = require('child-process-promise').exec;
var argv = require('minimist')(process.argv.slice(2));

/**
 * Namespace
 */
var Runtime = {

	/**
	 * Release Channels
	 * We must pressure crosswalk-project.org to offer a 'latest-release' url for each release channel
	 */
	ReleaseChannels: {
		stable: 'https://download.01.org/crosswalk/releases/crosswalk/android/stable/10.39.235.15/crosswalk-10.39.235.15.zip',
		beta: 'https://download.01.org/crosswalk/releases/crosswalk/android/beta/11.40.277.1/crosswalk-11.40.277.1.zip',
		canary: 'https://download.01.org/crosswalk/releases/crosswalk/android/canary/12.40.278.0/crosswalk-12.40.278.0.zip'
	},

	/**
	 * Tool arguments
	 * Use `-r` or `--release` to specify the release channel
	 * Use `-t` or `--target` to specify the target android version
	 */
	Args: {
		release: argv._[0] || argv.r || argv.release || 'stable',
		target: argv._[1] || argv.t || argv.target || null,
	},

	/**
	 * Void Main
	 */
	main: function() {
		if(Runtime.Args.target) {
			Runtime.downloadCrosswalk();
		} else {
			Runtime.getSDKTarget();
		}
	},

	/**
	 * Get SDK target
	 */
	getSDKTarget: function() {
		exec('android list')
			.then(function(result) {
				Runtime.Args.target = result.stdout.match(/w*android-\w*/)[0];

				log.writeln('Found SDK target: ' + Runtime.Args.target);
				Runtime.downloadCrosswalk();
			})
			.fail(function(err) {
				log.error(err);
			});
	},

	/**
	 * Download latest Crosswalk version
	 */
	downloadCrosswalk: function() {

		// Set up Crosswalk verion to Download
		var download = new Download({ extract: true, strip: 1, mode: '755' })
			.get(Runtime.ReleaseChannels[Runtime.Args.release])
			.dest(__dirname + '/downloads/crosswalk-' + Runtime.Args.release)
			.use(progress());

		// Remove previously downloaded Crosswalk version
		fs.remove(__dirname + '/downloads/crosswalk-' + Runtime.Args.release,
			function(err){
				if(err) {
					throw err;
				} else {
					log.writeln('Removed old Crosswalk ' + Runtime.Args.release);
				}
			});

		// Start Downloading
		download.run(
			function (err) {
				if(err) {
					throw err;
				} else {
					log.writeln('Crosswalk ' + Runtime.Args.release + ' downloaded succesfully');
					Runtime.buildReplace();
				}
			});

	},

	/**
	 * Replace 'CordovaLib' folder with Crosswalk's 'framework' folder
	 * rm -Rf platforms/android/CordovaLib/*
	 * cp -a <path_to_unpacked_bundle>/framework/* \ platforms/android/CordovaLib/
	 * Replace 'VERSION' file with Crosswalk 'VERSION' file
	 * cp -a <path_to_bundle>/VERSION platforms/android/
	 */
	buildReplace: function() {

		// Clean CordovaLib dir
		fs.remove('./platforms/android/CordovaLib/',
			function(err){
				if(err) {
					throw err;
				} else {
					log.writeln('Removed old CordovaLib');
				}

				// Replace CordovaLib with Crosswalks version
				fs.copy(__dirname + '/downloads/crosswalk-'+Runtime.Args.release+'/framework', './platforms/android/CordovaLib',
					function(err) {
						if(err) {
							throw(err);
						} else {
							log.writeln('./platforms/android/CordovaLib was replaced with the Crosswalk ' + Runtime.Args.release + ' framework');
						}

						// Add meta VERSION file
						fs.copy(__dirname + '/downloads/crosswalk-' + Runtime.Args.release + '/VERSION', './platforms/android/VERSION',
							function(err) {
								if(err) {
									throw(err);
								} else {
									log.writeln('./platforms/android/VERSION file was replaced with Crosswalk VERSION file');
									Runtime.buildPermissions();
								}
							});
					});
			});
	},

	/**
	 * Add correct permisions for Crosswalk to AndroidManifest.xml
	 * platforms/android/AndroidManifest.xml, adding these lines just before the existing <application> element:
	 * <uses-permission android:name="android.permission.ACCESS_WIFI_STATE" />
	 * <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
	 */
	buildPermissions: function() {
		var parser = new xml2js.Parser();
		fs.readFile('./platforms/android/AndroidManifest.xml', function(err, data) {
			if(err) {
				throw(err);
			}
			parser.parseString(data, function (err, result) {
			if(err) {
				throw(err);
			}

				// Has Dependency
				var hasDep = {
					wifi: false,
					network: false
				};

				// Check for pre-existing dep
				for(var i=0; i<result.manifest['uses-permission'].length; i++) {
					if(JSON.stringify(result.manifest['uses-permission'][i]) === '{"$":{"android:name":"android.permission.ACCESS_WIFI_STATE"}}') {
						hasDep.wifi = true;
					}
					if(JSON.stringify(result.manifest['uses-permission'][i]) === '{"$":{"android:name":"android.permission.ACCESS_NETWORK_STATE"}}') {
						hasDep.network = true;
					}
				}

				// Add permissions to xml
				if(!hasDep.wifi) {
					result.manifest['uses-permission']
						.push({ '$': { 'android:name': 'android.permission.ACCESS_WIFI_STATE' } });
				}
				if(!hasDep.network) {
					result.manifest['uses-permission']
						.push({ '$': { 'android:name': 'android.permission.ACCESS_NETWORK_STATE' } });
				}

				// Rebuild xml
				var builder = new xml2js.Builder();
				var xml = builder.buildObject(result);

				// Update xml file
				fs.outputFile('./platforms/android/AndroidManifest.xml', xml, function(err) {
				  if(err) {
				  	throw(err);
				  } else {
				  	log.writeln('Added AndroidManifest.xml permissions');
						Runtime.buildFinal();
				  }
				});

			});
		});
	},

	/**
	 * Run the final build commands
	 * export ANDROID_HOME=$(dirname $(dirname $(which android)))
	 * cd platforms/android/CordovaLib/
	 * android update project --subprojects --path . --target "android-19"
	 * ant debug
	 * cd ../../..
	 */
	buildFinal: function() {
		exec('export ANDROID_HOME=$(dirname $(dirname $(which android))) && cd platforms/android/CordovaLib/ && android update project --subprojects --path . --target "' + Runtime.Args.target + '" && ant debug && cd ../../..')
			.then(function(result) {
				log.writeln(result.stdout);
				log.writeln('Congratulations! you are now using Crosswalk ' + Runtime.Args.release + '. Go ahead and and try it out "cordova run android"');
			})
			.fail(function(err) {
				log.error(err);
			});
	}

};

/**
 * Init Main
 */
Runtime.main();
